pub fn get_template() []const u8 {
    const template =
        \\# Autogenerated Python bindings for {{struct_name}}
        \\# Do not edit this file directly
        \\
        \\from ctypes import CDLL, Structure, POINTER{{#c_type_imports}}, {{id}}{{/c_type_imports}}
        \\
        \\libzigpy = CDLL("./zig-out/lib/libzigpy.{{shared_lib_extension}}")
        \\
        \\class {{struct_name}}(Structure):
        \\    _fields_ = [{{#field_data}}("{{name}}", {{type}}), {{/field_data}}]
        \\
        \\libzigpy.{{init}}.restype = POINTER({{struct_name}})
        \\libzigpy.{{del}}.argtypes = [POINTER({{struct_name}})]
        \\
        \\# define c interfaces
        \\{{#methods}}
        \\libzigpy.{{zigname}}.argtypes = [POINTER({{struct_name}}){{#args}}, {{ctype}}{{/args}}]
        \\libzigpy.{{zigname}}.restype = {{res_ctype}}
        \\{{/methods}}
        \\
        \\class {{struct_name}}():
        \\  def __init__(self):
        \\    self.ptr = libzigpy.{{init}}()
        \\
        \\  def __del__(self):
        \\    libzigpy.{{del}}(self.ptr)
        \\
        \\
        \\  {{#properties}}
        \\  @property
        \\  def {{name}}(self):
        \\      return self.ptr.contents.{{name}}
        \\
        \\  @{{name}}.setter
        \\  def {{name}}(self, value):
        \\      self.ptr.contents.{{name}} = value
        \\
        \\
        \\  {{/properties}}
        \\  {{#methods}}
        \\  def {{pyname}}(self{{#args}}, {{name}}: {{pytype}}{{/args}}): 
        \\  {{#args}}
        \\      c_{{name}} = {{conversion_func}}
        \\  {{/args}}
        \\      c_res = libzigpy.{{zigname}}(self.ptr{{#args}}, c_{{name}}{{/args}})
        \\      res = {{res_conversion_func}}
        \\      return res
        \\
        \\
        \\  {{/methods}}
    ;
    return template;
}
