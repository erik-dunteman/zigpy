pub fn get_template() []const u8 {
    const template =
        \\# Autogenerated Python bindings for {{struct_ident}}
        \\# Do not edit this file directly
        \\
        \\from ctypes import CDLL, Structure, POINTER{{#ctype_imports}}, {{ident}}{{/ctype_imports}}
        \\
        \\libzigpy = CDLL("./zig-out/lib/libzigpy.{{shared_lib_extension}}")
        \\
        \\# Public class
        \\class {{struct_ident}}(Structure):
        \\    _fields_ = [{{#fields}}("{{ident}}", {{ctype}}), {{/fields}}]
        \\
        \\# Shared Library Function interfaces
        \\libzigpy.codegenstruct___init__.restype = POINTER({{struct_ident}})
        \\libzigpy.codegenstruct___del__.argtypes = [POINTER({{struct_ident}})]
        \\{{#methods}}
        \\libzigpy.{{libzigpy_ident}}.argtypes = [{{#args}}{{ctype}}, {{/args}}]
        \\libzigpy.{{libzigpy_ident}}.restype = {{res_ctype}}
        \\
        \\{{/methods}}
        \\class {{struct_ident}}():
        \\  def __init__(self):
        \\    self.ptr = libzigpy.codegenstruct___init__()
        \\  def __del__(self):
        \\    libzigpy.codegenstruct___del__(self.ptr)
        \\
        \\  {{#fields}}
        \\  @property
        \\  def {{ident}}(self):
        \\      return self.ptr.contents.{{ident}}
        \\  @{{ident}}.setter
        \\  def {{ident}}(self, value: {{py_type}}):
        \\      self.ptr.contents.{{ident}} = value
        \\
        \\  {{/fields}}
        \\  {{#methods}}
        \\  def {{ident}}(self{{#args}}{{^is_self}}, {{ident}}: {{py_type}}{{/is_self}}{{/args}}):
        \\      return libzigpy.{{libzigpy_ident}}(self.ptr{{#args}}{{^is_self}}, {{ident}}{{/is_self}}{{/args}})
        \\
        \\  {{/methods}}
    ;
    return template;
}

